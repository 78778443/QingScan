<?php


namespace app\controller;


use app\BaseController;
use app\model\AuthRuleModel;
use think\exception\HttpResponseException;
use think\facade\Cookie;
use think\facade\Db;
use think\facade\Request;
use think\facade\Response;
use think\facade\View;

class Common extends BaseController
{
    protected $userId, $auth_group_id, $menudata, $userRules, $menu, $userInfo;


    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->userInfo = $this->isLogin('scan_user');
        if (!$this->userInfo) {
            if (request()->isAjax()) {
                $this->apiReturn('0', [], '请先登录');
            } else {
                header("Location: ".url('login/index'));
                exit();
            }
        }
        View::assign('userInfo', $this->userInfo);
        $this->userId = $this->userInfo ? $this->userInfo['id'] : 0;
        $this->auth_group_id = $this->userInfo['auth_group_id'];
        //$href = strtolower(Request::controller() . '/' . Request::action());
        // 判断是否已经添加到rule表
        $href = cc_format(Request::controller() . '/' . Request::action());
        if (!AuthRuleModel::isExist($href)) {
            //echo '<pre>';
            $data['href'] = $href;
            $data['title'] = '未知';
            $data['pid'] = 43;
            $data['level'] = 3;
            $data['created_at'] = time();
            //var_dump($data);exit;
            Db::name('auth_rule')->insert($data);
        }
        //$auth_white = array('login/index', 'login/tncode', 'login/dologin', 'login/check'); // 白名单
        if (!$this->is_auth($href) && !in_array($href, config('app.NOT_AUTH_ACTION'))) {
            if (request()->isAjax()) {
                return $this->apiReturn(1,[],'暂无权限');
            } else {
                $this->error('暂无权限');
            }
        }
        if ($this->userId) {
            if ($this->userId == 1 || in_array($this->userId, config('app.ADMINISTRATOR'))) {
                $map = "is_delete = 0 and menu_status = 1 and level <= 2";
                $this->menudata = Db::name('auth_rule')->where($map)->field('auth_rule_id,href,title,icon_url,pid,level')->order('sort asc')->select();
            } else {    // 获取分组
                $where = "auth_group_id = $this->auth_group_id and status = 1";
                $auth_group = Db::name('auth_group')->where($where)->field('rules')->find();
                $this->userRules = rtrim($auth_group['rules'], ',');
                $map = "is_delete = 0 and menu_status = 1 and auth_rule_id in ($this->userRules) and level <= 2";
                $this->menudata = Db::name('auth_rule')->where($map)->field('auth_rule_id,href,title,icon_url,pid,level')->order('sort asc')->select();
            }
            $menu_list = \Leftnav::menuList($this->menudata);
            /*$map = "href = '{$href}' and menu_status = 1 and is_delete = 0";
            $count = Db::name('auth_rule')->where($map)->count('auth_rule_id');
            if ($count > 1) {
                $map .= ' and level >= 1';
            }
            $str_auth_rule = Db::name('auth_rule')->where($map)->field('auth_rule_id,href,title,icon_url,pid,level')->find();
            if ($str_auth_rule) {
                if ($str_auth_rule['level'] == 3) {
                    $auth_rule = Db::name('auth_rule')->where("auth_rule_id = {$str_auth_rule['pid']}")->field('href')->find();
                    $href = strtolower($auth_rule['href']);
                }
            } else {
                if (request()->isAjax()) {
                    exit(json_encode(['code' => 1, 'msg' => '菜单不存在'],JSON_UNESCAPED_UNICODE));x
                } else {
                    $this->error('菜单不存在');
                }
            }
            if ($str_auth_rule['level'] == 2 || $str_auth_rule['level'] == 3) {
                if ($str_auth_rule['level'] == 2) {
                    $map = "auth_rule_id = {$str_auth_rule['pid']} and is_delete = 0 and level = 1";
                } else {
                    $map = "auth_rule_id = {$str_auth_rule['pid']} and is_delete = 0 and level = 2";

                    $auth_rule = Db::name('auth_rule')->where($map)->field('pid')->find();

                    $map = "auth_rule_id = {$auth_rule['pid']} and is_delete = 0 and level = 1";
                }
                $auth_rule = Db::name('auth_rule')->where($map)->field('href')->find();
                View::assign('parent_href',$auth_rule['href']);
            }*/
            View::assign('menu_list',$menu_list);
        }
        //View::assign('href',$href);
    }

    // 权限判断
    private function is_auth($name)
    {
        if (!in_array($this->userId, config('app.ADMINISTRATOR'))) {
            $rules = Db::name('auth_group')->where('auth_group_id',$this->auth_group_id)->value('rules');
            if (Db::name('auth_rule')->where('href',$name)->value('is_open_auth') == 0) {
                return true;
            }
            $user_auth_rule = Db::name('auth_rule')->where('auth_rule_id','in',"({$rules})")->field('title,href,is_open_auth')->select()->toArray();
            $is_auth = false;
            foreach ($user_auth_rule as $v) {
                if (strtolower($name) == strtolower($v['href'])) {
                    var_dump($v);exit;
                    $is_auth = true;
                }
            }
            return $is_auth;
        }
        return true;
    }

    /**
     * 判断用户是否登录
     * @param name
     * @return int|array
     */
    public function is_login($name)
    {
        return session($name);
    }

    /**
     * 判断用户是否登录
     * @param $cookie_name
     * @return int|array
     */
    public function isLogin($cookie_name){
        if (!$cookie_name) {
            return 0;
        }
        parse_str(think_decrypt(Cookie::get($cookie_name)), $arr);
        if (!$arr)
            return 0;
        return $arr;
    }
}